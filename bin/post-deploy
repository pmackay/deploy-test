#!/bin/sh

# Exit if any subcommand fails
set -e

# Check jq is installed
command -v jq >/dev/null 2>&1 || { echo >&2 "I require jq but it's not installed.  Aborting."; exit 1; }

# Heroku target is staging by default, or command line parameter
target="${1:-staging}"

# Update tag related to deployment
if [ -f $(git rev-parse --git-dir)/shallow ]; then
  git fetch --tags --all --unshallow
else
  echo "Skipping fetch, this is not a shallow repo"
fi
git tag "$target" -f
git push -f origin "refs/tags/$target"

# Get the commit hash of the last release
last_deploy=$(heroku releases --json --remote $target | jq .[1].description)
last_deployed_commit=$(echo $last_deploy | sed 's/.*Deploy \([a-z0-9]*\).*/\1/')

# Run db:migrate and/or update elasticsearch indexes (only if needed)
migrate_diff=$(git diff --shortstat $last_deployed_commit HEAD -- db/migrate)
elasticsearch_diff=$(git diff --shortstat $last_deployed_commit HEAD -- app/models)

if [ -n "$migrate_diff" || -n "$elasticsearch_diff"]; then
  heroku maintenance:on --remote $target
  heroku ps:scale worker=0

  if [ -n "$migrate_diff" ]; then
    echo "db/migrate has changed, running migrations"
    heroku run rails db:migrate --remote $target
  else
    echo "No change to migrations, skipping db:migrate"
  fi

  if [ -n "$elasticsearch_diff" ]; then
    echo "app/models has changed, indexing elasticsearch"
    heroku run 'rake environment elasticsearch:index:create elasticsearch:import:all' --remote $target
  else
    echo "No change to app/models, skipping elasticsearch indexing"
  fi

  heroku restart --remote "$target"
  heroku ps:scale worker=1
  heroku maintenance:off --remote $target
fi

